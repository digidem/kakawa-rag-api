name: Offline Stack Test

on:
  push:
    branches:
      - main

jobs:
  test-offline-stack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set environment variables for offline run
        run: |
          sed -i -e "s/^LANGFUSE_PUBLIC_KEY=.*/LANGFUSE_PUBLIC_KEY=\${{ secrets.LANGFUSE_PK }}/" -e "s/^LANGFUSE_SECRET_KEY=.*/LANGFUSE_SECRET_KEY=\${{ secrets.LANGFUSE_SK }}/" -e "s|^LANGFUSE_HOST=.*|LANGFUSE_HOST=\${{ secrets.LANGFUSE_HOST }}|" -e "s/^LOCAL_MODE=false/LOCAL_MODE=true/" .env
      - name: Show contents of .env
        run: cat .env
      - name: Run docker-compose
        run: docker-compose up -d
      - name: Basic wait
        run: sleep 120
      - name: List running containers
        run: docker ps
      - name: Log last 10 lines from all containers
        run: docker ps -q | xargs -I {} docker logs --tail 10 {}
      - name: Log RAG api
        run: docker logs kakawa_rag_api --tail 30
      - name: Pull Ollama model
        run: |
          OLLAMA_MODEL=$(grep OLLAMA_MODEL .env | cut -d '=' -f2)
          docker exec ollama ollama pull $OLLAMA_MODEL
      - name: Test LangFuse API endpoint
        run: |
          response=$(docker exec langfuse wget --header='accept: application/json' -qO - 'http://langfuse:3000/api/public/health')
          if echo "$response" | grep OK; then
            echo "Health check OK"
          else
            echo "Health check failed"
            exit 1
          fi
      - name: Test Qdrant API endpoint
        run: |
          run: |
            response=$(docker exec kakawa_rag_api python -c "import requests; response = requests.get('http://qdrant:6333/healthz', headers={'accept': 'application/json'}); print(response.status_code)")
            if [ "$response" -eq 200 ]; then
              echo "Healthz check passed"
            else
              echo "Healthz check failed"
              exit 1
            fi
      - name: Execute RAG API query
        run: |
          commit_hash=$(git rev-parse --short HEAD)
          echo $commit_hash
          success=false
          for i in {1..5}; do
            response=$(docker exec kakawa_rag_api python -c "import requests; response = requests.get('http://localhost:8000/rag?query=How%20to%20install%20Mapeo&user_id=github_action&session_id=$commit_hash', headers={'accept': 'application/json'}); print(response.status_code)")
            if [ "$response" -eq 200 ]; then
              echo "RAG API endpoint is up and running."
              success=true
              break
            else
              echo "Attempt $i failed with status code $response. Retrying in 20 seconds..."
              sleep 20
            fi
          done
          if [ "$success" = false ]; then
            echo "RAG API endpoint check failed after 5 attempts."
            exit 1
          fi
